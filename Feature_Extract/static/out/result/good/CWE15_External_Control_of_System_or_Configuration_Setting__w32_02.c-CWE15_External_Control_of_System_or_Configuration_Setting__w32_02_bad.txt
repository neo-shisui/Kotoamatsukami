(99,37,0)
(4,73,0)
(50,73,0)
(21,67,0)
(140,64,0)
(139,57,0)
(87,129,0)
(17,75,0)
(31,98,0)
(116,57,0)
(124,26,0)
(55,153,0)
(160,128,0)
(152,3,0)
(161,126,0)
(44,80,0)
(105,153,0)
(144,153,0)
(61,2,0)
(100,63,0)
(123,164,0)
(106,73,0)
(11,62,0)
(108,47,0)
(14,80,0)
(118,63,0)
(143,81,0)
(119,37,0)
(15,44,0)
(123,98,0)
(126,164,0)
(65,81,0)
(20,93,0)
(79,164,0)
(114,28,0)
(19,51,0)
(128,160,0)
(154,98,0)
(67,73,0)
(51,95,0)
(120,2,0)
(137,163,0)
(25,145,0)
(102,67,0)
(72,152,0)
(129,105,0)
(112,163,0)
(56,153,0)
(52,42,0)
(131,128,0)
(104,153,0)
(164,126,0)
(47,27,0)
(156,80,0)
(160,64,0)
(0,145,0)
(153,164,0)
(47,75,0)
(132,27,0)
(90,80,0)
(107,138,0)
(139,43,0)
(158,105,0)
(10,112,0)
(37,87,0)
(122,53,0)
(12,80,0)
(36,9,0)
(62,3,0)
(98,80,0)
(42,160,0)
(141,3,0)
(5,114,0)
(111,75,0)
(28,73,0)
(127,138,0)
(94,82,0)
(105,73,0)
(39,30,0)
(35,154,0)
(32,27,0)
(95,53,0)
(43,139,0)
(160,42,0)
(83,7,0)
(2,142,0)
(95,73,0)
(24,97,0)
(115,149,0)
(54,126,0)
(110,126,0)
(18,73,0)
(149,0,0)
(0,75,0)
(117,133,0)
(88,81,0)
(64,160,0)
(26,75,0)
(103,56,0)
(3,81,0)
(155,62,0)
(62,18,0)
(2,75,0)
(38,101,0)
(0,149,0)
(101,28,0)
(76,44,0)
(159,164,0)
(148,80,0)
(92,18,0)
(142,2,0)
(1,111,0)
(123,121,0)
(49,111,0)
(153,105,0)
(151,129,0)
(37,105,0)
(74,0,0)
(8,80,0)
(29,159,0)
(40,73,0)
(41,43,0)
(130,80,0)
(28,114,0)
(129,87,0)
(53,95,0)
(157,142,0)
(71,154,0)
(91,80,0)
(145,0,0)
(85,43,0)
(96,56,0)
(46,137,0)
(69,73,0)
(146,129,0)
(153,56,0)
(150,123,0)
(3,138,0)
(126,75,0)
(57,73,0)
(28,101,0)
(80,165,0)
(13,89,0)
(164,73,0)
(136,47,0)
(0,74,0)
(86,159,0)
(60,152,0)
(16,45,0)
(22,73,0)
(62,105,0)
(113,80,0)
(58,28,0)
(84,26,0)
(109,80,0)
(74,133,0)
(154,164,0)
(48,139,0)
(6,3,0)
(75,73,0)
(78,98,0)
(34,4,0)
(70,0,0)
(27,80,0)
(133,74,0)
(87,37,0)
(45,33,0)
(134,26,0)
(125,73,0)
(23,81,0)
(45,27,0)
(63,4,0)
(59,51,0)
(147,74,0)
(153,3,0)
(45,75,0)
(152,72,0)
(75,26,0)
(138,81,0)
(74,147,0)
(135,128,0)
(85,4,1)
(111,1,1)
(86,29,1)
(129,105,1)
(10,137,1)
(64,140,1)
(164,126,1)
(127,107,1)
(120,61,1)
(21,64,1)
(5,111,1)
(2,75,1)
(114,5,1)
(112,10,1)
(35,94,1)
(35,13,1)
(18,92,1)
(45,16,1)
(54,79,1)
(59,19,1)
(51,59,1)
(141,138,1)
(140,160,1)
(28,114,1)
(74,147,1)
(20,66,1)
(162,18,1)
(160,128,1)
(157,145,1)
(96,103,1)
(145,0,1)
(47,136,1)
(83,159,1)
(100,28,1)
(77,3,1)
(6,141,1)
(144,158,1)
(135,131,1)
(60,20,1)
(126,75,1)
(61,157,1)
(71,35,1)
(43,41,1)
(104,144,1)
(46,72,1)
(62,105,1)
(76,15,1)
(35,24,1)
(151,146,1)
(128,135,1)
(0,75,1)
(154,164,1)
(108,123,1)
(78,27,1)
(28,101,1)
(35,83,1)
(117,70,1)
(131,98,1)
(154,98,1)
(123,164,1)
(116,139,1)
(44,76,1)
(45,27,1)
(138,127,1)
(118,100,1)
(45,75,1)
(153,3,1)
(35,162,1)
(53,122,1)
(52,128,1)
(102,21,1)
(115,74,1)
(0,74,1)
(17,67,1)
(122,51,1)
(158,159,1)
(56,96,1)
(105,153,1)
(29,164,1)
(4,34,1)
(98,31,1)
(3,138,1)
(153,55,1)
(1,49,1)
(36,87,1)
(70,25,1)
(132,32,1)
(0,149,1)
(63,118,1)
(94,142,1)
(149,115,1)
(68,72,1)
(123,150,1)
(34,63,1)
(24,145,1)
(131,162,1)
(161,110,1)
(87,37,1)
(15,77,1)
(60,77,1)
(16,47,1)
(62,3,1)
(3,6,1)
(74,133,1)
(48,43,1)
(134,124,1)
(25,95,1)
(58,114,1)
(133,117,1)
(153,56,1)
(92,62,1)
(67,102,1)
(160,42,1)
(41,85,1)
(13,111,1)
(110,54,1)
(111,75,1)
(19,57,1)
(139,48,1)
(2,120,1)
(159,86,1)
(129,151,1)
(37,105,1)
(11,155,1)
(101,38,1)
(60,66,1)
(137,46,1)
(49,75,1)
(99,119,1)
(95,53,1)
(126,161,1)
(64,160,1)
(123,98,1)
(47,75,1)
(152,60,1)
(66,47,1)
(35,39,1)
(87,129,1)
(75,26,1)
(153,164,1)
(55,56,1)
(79,142,1)
(37,99,1)
(26,134,1)
(47,27,1)
(159,164,1)
(155,87,1)
(62,11,1)
(66,45,1)
(154,71,1)
(68,112,1)
(38,58,1)
(103,104,1)
(35,36,1)
(146,37,1)
(142,2,1)
(108,154,1)
(31,78,1)
(32,44,1)
(136,108,1)
(72,152,1)
(27,132,1)
(119,105,1)
(150,154,1)
(39,64,1)
(42,52,1)
(57,116,1)
(139,43,1)
(84,17,1)
(152,3,1)
(124,84,1)
(132,77,2)
(131,162,2)
(145,0,2)
(28,114,2)
(2,145,2)
(122,111,2)
(59,111,2)
(154,98,2)
(160,162,2)
(32,77,2)
(153,56,2)
(5,111,2)
(0,149,2)
(142,2,2)
(57,111,2)
(112,72,2)
(0,75,2)
(164,142,2)
(110,142,2)
(49,64,2)
(160,77,2)
(51,111,2)
(101,111,2)
(52,162,2)
(150,154,2)
(111,75,2)
(111,64,2)
(74,147,2)
(0,111,2)
(119,159,2)
(123,164,2)
(135,162,2)
(117,111,2)
(114,111,2)
(25,111,2)
(18,87,2)
(134,64,2)
(53,111,2)
(10,72,2)
(27,77,2)
(87,37,2)
(99,159,2)
(35,77,2)
(159,142,2)
(162,87,2)
(126,75,2)
(144,159,2)
(28,111,2)
(128,162,2)
(43,111,2)
(86,142,2)
(129,105,2)
(103,159,2)
(21,64,2)
(131,77,2)
(139,111,2)
(78,77,2)
(142,145,2)
(13,111,2)
(145,111,2)
(120,145,2)
(105,153,2)
(3,138,2)
(34,111,2)
(128,77,2)
(149,111,2)
(45,27,2)
(140,77,2)
(64,77,2)
(74,111,2)
(98,77,2)
(95,53,2)
(115,111,2)
(37,105,2)
(95,111,2)
(52,77,2)
(136,77,2)
(83,159,2)
(124,64,2)
(47,27,2)
(137,72,2)
(61,145,2)
(87,159,2)
(45,75,2)
(108,77,2)
(46,72,2)
(135,77,2)
(151,37,2)
(153,3,2)
(126,142,2)
(160,128,2)
(56,159,2)
(0,74,2)
(94,142,2)
(20,66,2)
(161,142,2)
(102,64,2)
(4,111,2)
(71,77,2)
(72,152,2)
(48,111,2)
(76,77,2)
(47,75,2)
(66,77,2)
(31,77,2)
(15,77,2)
(85,111,2)
(67,64,2)
(19,111,2)
(58,111,2)
(54,142,2)
(160,42,2)
(158,159,2)
(104,159,2)
(84,64,2)
(2,75,2)
(64,160,2)
(28,101,2)
(164,126,2)
(75,26,2)
(152,3,2)
(38,111,2)
(47,77,2)
(1,64,2)
(42,162,2)
(139,43,2)
(29,142,2)
(55,159,2)
(116,111,2)
(153,159,2)
(154,164,2)
(96,159,2)
(123,154,2)
(92,87,2)
(133,111,2)
(36,87,2)
(154,77,2)
(123,98,2)
(26,64,2)
(11,87,2)
(79,142,2)
(62,3,2)
(70,111,2)
(41,111,2)
(129,37,2)
(64,162,2)
(105,159,2)
(140,162,2)
(45,47,2)
(146,37,2)
(42,77,2)
(157,145,2)
(153,164,2)
(62,105,2)
(155,87,2)
(44,77,2)
(62,87,2)
(39,64,2)
(74,133,2)
(37,159,2)
(17,64,2)
(100,111,2)
(75,64,2)
(87,129,2)
(24,145,2)
(16,47,2)
(63,111,2)
(159,164,2)
(118,111,2)
-----------------------------------
(0,bind(listenSocket, (struct sockaddr*)
(1,INVALID_SOCKET)
(2,listen(listenSocket, LISTEN_BACKLOG)
(3,data = dataBuffer)
(4,service.sin_family = AF_INET)
(5,service)
(6,dataBuffer)
(7,)
(8,service)
(9,)
(10,1)
(11,recvResult)
(12,acceptSocket)
(13,break;)
(14,wsaData)
(15,wsaDataInit)
(16,listenSocket)
(17,listenSocket)
(18,data[recvResult] = \'\\0\')
(19,service)
(20,WSACleanup()
(21,wsaDataInit)
(22,if (WSAStartup(MAKEWORD(2,2)
(23,data)
(24,break;)
(25,SOCKET_ERROR)
(26,socket(PF_INET, SOCK_STREAM, 0)
(27,listenSocket = INVALID_SOCKET)
(28,memset(&service, 0, sizeof(service)
(29,acceptSocket)
(30,)
(31,INVALID_SOCKET)
(32,listenSocket)
(33,)
(34,AF_INET)
(35,acceptSocket)
(36,break;)
(37,recvResult == SOCKET_ERROR)
(38,service)
(39,break;)
(40,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(41,sin_addr)
(42,&wsaData)
(43,service.sin_addr)
(44,wsaDataInit = FALSE)
(45,closesocket(listenSocket)
(46,"Failure setting computer name")
(47,listenSocket != INVALID_SOCKET)
(48,s_addr)
(49,listenSocket)
(50,if (recvResult == SOCKET_ERROR || recvResult == 0)
(51,service.sin_port)
(52,wsaData)
(53,htons(LISTEN_PORT)
(54,listenSocket)
(55,0)
(56,100 - 1)
(57,service.sin_addr.s_addr = INADDR_ANY)
(58,0)
(59,sin_port)
(60,data)
(61,listenSocket)
(62,data[recvResult])
(63,service.sin_family)
(64,WSAStartup(MAKEWORD(2,2)
(65,if (!SetComputerNameA(data)
(66,wsaDataInit)
(67,wsaDataInit = 1)
(68,RET)
(69,if (acceptSocket == INVALID_SOCKET)
(70,listenSocket)
(71,INVALID_SOCKET)
(72,!SetComputerNameA(data)
(73,)
(74,(struct sockaddr*)
(75,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(76,FALSE)
(77,1)
(78,acceptSocket)
(79,acceptSocket)
(80,)
(81,)
(82,)
(83,break;)
(84,PF_INET)
(85,service)
(86,INVALID_SOCKET)
(87,recvResult == SOCKET_ERROR || recvResult == 0)
(88,if(1)
(89,)
(90,if (acceptSocket != INVALID_SOCKET)
(91,if (wsaDataInit)
(92,\'\\0\')
(93,)
(94,break;)
(95,service.sin_port = htons(LISTEN_PORT)
(96,1)
(97,)
(98,acceptSocket = INVALID_SOCKET)
(99,SOCKET_ERROR)
(100,service)
(101,sizeof(service)
(102,1)
(103,100)
(104,data)
(105,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(106,if (listenSocket == INVALID_SOCKET)
(107,dataBuffer)
(108,listenSocket)
(109,wsaDataInit)
(110,NULL)
(111,listenSocket == INVALID_SOCKET)
(112,exit(1)
(113,recvResult)
(114,&service)
(115,service)
(116,INADDR_ANY)
(117,service)
(118,sin_family)
(119,recvResult)
(120,LISTEN_BACKLOG)
(121,)
(122,LISTEN_PORT)
(123,closesocket(acceptSocket)
(124,SOCK_STREAM)
(125,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(126,accept(listenSocket, NULL, NULL)
(127,"")
(128,MAKEWORD(2,2)
(129,recvResult == 0)
(130,do)
(131,2)
(132,INVALID_SOCKET)
(133,&service)
(134,0)
(135,2)
(136,INVALID_SOCKET)
(137,printLine("Failure setting computer name")
(138,dataBuffer[100] = "")
(139,service.sin_addr.s_addr)
(140,NO_ERROR)
(141,data)
(142,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(143,dataBuffer)
(144,acceptSocket)
(145,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(146,recvResult)
(147,struct sockaddr*)
(148,if (listenSocket != INVALID_SOCKET)
(149,sizeof(service)
(150,acceptSocket)
(151,0)
(152,SetComputerNameA(data)
(153,recv(acceptSocket, data, 100 - 1, 0)
(154,acceptSocket != INVALID_SOCKET)
(155,data)
(156,listenSocket)
(157,SOCKET_ERROR)
(158,recvResult)
(159,acceptSocket == INVALID_SOCKET)
(160,WSAStartup(MAKEWORD(2,2)
(161,NULL)
(162,0)
(163,)
(164,acceptSocket = accept(listenSocket, NULL, NULL)
(165,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
0