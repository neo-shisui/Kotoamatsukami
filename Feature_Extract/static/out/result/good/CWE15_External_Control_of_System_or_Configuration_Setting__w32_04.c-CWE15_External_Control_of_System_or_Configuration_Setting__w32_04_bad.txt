(131,0,0)
(56,119,0)
(46,148,0)
(146,25,0)
(133,74,0)
(158,70,0)
(130,43,0)
(77,4,0)
(80,156,0)
(161,0,0)
(89,127,0)
(91,7,0)
(147,88,0)
(14,119,0)
(90,7,0)
(15,114,0)
(39,0,0)
(143,131,0)
(66,161,0)
(42,96,0)
(23,0,0)
(160,146,0)
(62,21,0)
(82,131,0)
(128,8,0)
(143,91,0)
(125,143,0)
(112,64,0)
(72,70,0)
(40,146,0)
(49,131,0)
(156,80,0)
(59,7,0)
(33,156,0)
(18,25,0)
(157,108,0)
(5,4,0)
(134,122,0)
(11,66,0)
(84,163,0)
(2,140,0)
(17,66,0)
(94,0,0)
(83,63,0)
(137,43,0)
(82,161,0)
(4,121,0)
(95,31,0)
(108,152,0)
(71,47,0)
(92,113,0)
(85,149,0)
(66,11,0)
(159,161,0)
(102,113,0)
(154,146,0)
(49,86,0)
(57,91,0)
(12,82,0)
(60,131,0)
(152,0,0)
(44,36,0)
(70,154,0)
(100,94,0)
(156,154,0)
(66,17,0)
(64,95,0)
(97,30,0)
(148,161,0)
(80,70,0)
(121,7,0)
(21,47,0)
(138,128,0)
(7,150,0)
(47,71,0)
(70,80,0)
(111,157,0)
(52,0,0)
(163,66,0)
(16,38,0)
(131,82,0)
(110,63,0)
(66,163,0)
(104,55,0)
(53,30,0)
(45,127,0)
(146,154,0)
(129,31,0)
(122,142,0)
(108,157,0)
(88,147,0)
(27,66,0)
(122,121,0)
(133,20,0)
(135,88,0)
(98,154,0)
(144,152,0)
(73,107,0)
(106,121,0)
(41,91,0)
(163,120,0)
(115,147,0)
(133,107,0)
(48,7,0)
(113,0,0)
(38,148,0)
(29,68,0)
(105,143,0)
(55,88,0)
(88,0,0)
(63,95,0)
(161,30,0)
(74,133,0)
(43,161,0)
(146,131,0)
(136,95,0)
(34,156,0)
(26,148,0)
(148,38,0)
(145,7,0)
(20,133,0)
(164,157,0)
(24,74,0)
(6,107,0)
(78,32,0)
(153,20,0)
(76,0,0)
(22,119,0)
(51,49,0)
(127,0,0)
(126,108,0)
(109,82,0)
(79,37,0)
(25,146,0)
(49,91,0)
(30,161,0)
(69,99,0)
(107,133,0)
(141,11,0)
(64,94,0)
(31,119,0)
(101,71,0)
(81,102,0)
(65,99,0)
(120,163,0)
(96,7,0)
(58,7,0)
(67,84,0)
(10,25,0)
(122,161,0)
(68,8,0)
(35,21,0)
(19,7,0)
(95,119,0)
(151,64,0)
(4,161,0)
(124,7,0)
(99,131,0)
(123,146,0)
(88,55,0)
(165,82,0)
(117,54,0)
(162,0,0)
(154,0,0)
(163,84,0)
(116,7,0)
(118,7,0)
(9,17,0)
(63,83,0)
(13,7,0)
(3,96,0)
(93,95,0)
(146,95,0)
(103,31,0)
(87,102,0)
(155,30,0)
(64,154,0)
(75,119,0)
(1,121,0)
(47,0,0)
(28,0,0)
(70,158,1)
(135,147,1)
(103,129,1)
(88,147,1)
(35,152,1)
(10,18,1)
(133,74,1)
(105,79,1)
(146,160,1)
(80,70,1)
(122,134,1)
(93,31,1)
(42,132,1)
(25,10,1)
(79,80,1)
(49,131,1)
(20,153,1)
(47,71,1)
(38,148,1)
(68,29,1)
(46,26,1)
(147,115,1)
(100,64,1)
(16,17,1)
(122,121,1)
(11,141,1)
(62,35,1)
(24,107,1)
(87,88,1)
(92,102,1)
(108,126,1)
(143,91,1)
(69,131,1)
(49,51,1)
(4,161,1)
(34,33,1)
(61,128,1)
(117,17,1)
(91,57,1)
(102,81,1)
(131,82,1)
(126,157,1)
(163,120,1)
(156,154,1)
(41,121,1)
(110,50,1)
(84,67,1)
(43,137,1)
(96,3,1)
(33,154,1)
(164,113,1)
(80,156,1)
(105,15,1)
(97,159,1)
(158,72,1)
(136,93,1)
(94,100,1)
(30,53,1)
(50,122,1)
(1,96,1)
(3,42,1)
(44,99,1)
(27,9,1)
(45,89,1)
(130,161,1)
(88,55,1)
(153,133,1)
(85,20,1)
(63,110,1)
(43,161,1)
(66,161,1)
(154,146,1)
(77,143,1)
(66,163,1)
(127,45,1)
(148,161,1)
(155,97,1)
(156,34,1)
(57,41,1)
(66,11,1)
(138,68,1)
(5,77,1)
(64,95,1)
(101,21,1)
(6,139,1)
(132,95,1)
(99,65,1)
(73,6,1)
(104,135,1)
(105,139,1)
(55,104,1)
(26,16,1)
(105,78,1)
(83,63,1)
(2,50,1)
(9,47,1)
(99,131,1)
(29,83,1)
(139,94,1)
(110,132,1)
(161,30,1)
(159,127,1)
(21,62,1)
(128,138,1)
(63,95,1)
(143,131,1)
(40,98,1)
(115,43,1)
(151,80,1)
(64,112,1)
(163,84,1)
(51,143,1)
(112,151,1)
(122,161,1)
(105,44,1)
(60,38,1)
(81,87,1)
(125,105,1)
(12,109,1)
(165,12,1)
(4,121,1)
(61,83,1)
(77,49,1)
(143,125,1)
(144,108,1)
(146,95,1)
(109,60,1)
(148,46,1)
(6,91,1)
(17,66,1)
(49,91,1)
(152,144,1)
(50,4,1)
(146,25,1)
(105,117,1)
(15,43,1)
(64,154,1)
(65,69,1)
(134,4,1)
(98,99,1)
(82,165,1)
(137,130,1)
(95,136,1)
(146,131,1)
(157,111,1)
(141,163,1)
(82,161,1)
(20,133,1)
(105,85,1)
(123,40,1)
(31,103,1)
(89,20,1)
(53,155,1)
(67,27,1)
(71,101,1)
(113,92,1)
(70,154,1)
(160,25,1)
(108,157,1)
(107,73,1)
(110,2,1)
(72,156,1)
(95,31,1)
(121,106,1)
(133,107,1)
(106,1,1)
(74,24,1)
(111,164,1)
(4,5,1)
(78,38,1)
(18,123,1)
(6,139,2)
(33,99,2)
(38,148,2)
(122,161,2)
(99,38,2)
(29,83,2)
(60,38,2)
(107,139,2)
(20,139,2)
(125,132,2)
(3,132,2)
(154,99,2)
(25,99,2)
(153,139,2)
(55,43,2)
(96,132,2)
(73,132,2)
(83,63,2)
(95,31,2)
(49,131,2)
(127,20,2)
(49,143,2)
(20,133,2)
(80,70,2)
(146,95,2)
(71,43,2)
(121,132,2)
(20,132,2)
(82,161,2)
(148,161,2)
(159,20,2)
(68,83,2)
(130,20,2)
(80,99,2)
(152,43,2)
(47,43,2)
(153,132,2)
(88,55,2)
(156,154,2)
(133,74,2)
(47,71,2)
(163,43,2)
(134,4,2)
(143,91,2)
(6,132,2)
(2,50,2)
(67,43,2)
(30,20,2)
(24,139,2)
(109,38,2)
(133,139,2)
(156,99,2)
(5,132,2)
(163,120,2)
(137,20,2)
(91,132,2)
(74,132,2)
(100,80,2)
(157,43,2)
(158,156,2)
(108,157,2)
(133,132,2)
(161,20,2)
(147,43,2)
(112,80,2)
(101,43,2)
(89,20,2)
(74,139,2)
(1,132,2)
(126,43,2)
(164,43,2)
(82,38,2)
(50,132,2)
(85,20,2)
(161,30,2)
(4,161,2)
(69,38,2)
(117,17,2)
(146,99,2)
(17,66,2)
(133,107,2)
(107,132,2)
(10,99,2)
(9,43,2)
(4,132,2)
(17,43,2)
(138,83,2)
(98,99,2)
(148,17,2)
(97,20,2)
(66,43,2)
(122,4,2)
(88,147,2)
(163,84,2)
(77,132,2)
(84,43,2)
(44,99,2)
(131,82,2)
(57,132,2)
(12,38,2)
(21,43,2)
(72,156,2)
(146,25,2)
(27,43,2)
(111,43,2)
(42,132,2)
(66,161,2)
(105,132,2)
(143,132,2)
(160,99,2)
(62,43,2)
(99,131,2)
(87,43,2)
(64,80,2)
(70,156,2)
(34,99,2)
(51,143,2)
(154,146,2)
(144,43,2)
(40,99,2)
(41,132,2)
(80,156,2)
(155,20,2)
(49,91,2)
(141,43,2)
(79,80,2)
(106,132,2)
(65,38,2)
(63,95,2)
(66,11,2)
(46,17,2)
(146,131,2)
(70,154,2)
(115,43,2)
(135,43,2)
(45,20,2)
(104,43,2)
(35,43,2)
(18,99,2)
(139,80,2)
(102,43,2)
(151,80,2)
(73,139,2)
(64,95,2)
(11,43,2)
(81,43,2)
(113,43,2)
(64,154,2)
(66,163,2)
(43,20,2)
(38,17,2)
(108,43,2)
(88,43,2)
(24,132,2)
(78,38,2)
(4,121,2)
(131,38,2)
(165,38,2)
(128,83,2)
(43,161,2)
(123,99,2)
(143,131,2)
(92,43,2)
(16,17,2)
(15,43,2)
(122,121,2)
(26,17,2)
(94,80,2)
(53,20,2)
-----------------------------------
(0,)
(1,listenSocket)
(2,WSACleanup()
(3,FALSE)
(4,listenSocket != INVALID_SOCKET)
(5,INVALID_SOCKET)
(6,2)
(7,)
(8,)
(9,SOCKET_ERROR)
(10,1)
(11,sizeof(service)
(12,NULL)
(13,listenSocket)
(14,data)
(15,break;)
(16,SOCKET_ERROR)
(17,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(18,100)
(19,wsaDataInit)
(20,WSAStartup(MAKEWORD(2,2)
(21,service.sin_port)
(22,if(STATIC_CONST_TRUE)
(23,if (WSAStartup(MAKEWORD(2,2)
(24,wsaData)
(25,100 - 1)
(26,listenSocket)
(27,listenSocket)
(28,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(29,"Failure setting computer name")
(30,socket(PF_INET, SOCK_STREAM, 0)
(31,dataBuffer[100] = "")
(32,)
(33,recvResult)
(34,SOCKET_ERROR)
(35,service)
(36,)
(37,)
(38,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(39,if (recvResult == SOCKET_ERROR || recvResult == 0)
(40,acceptSocket)
(41,acceptSocket)
(42,wsaDataInit)
(43,listenSocket == INVALID_SOCKET)
(44,break;)
(45,1)
(46,LISTEN_BACKLOG)
(47,service.sin_port = htons(LISTEN_PORT)
(48,service)
(49,closesocket(acceptSocket)
(50,wsaDataInit)
(51,acceptSocket)
(52,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(53,0)
(54,)
(55,sizeof(service)
(56,dataBuffer)
(57,INVALID_SOCKET)
(58,do)
(59,wsaData)
(60,acceptSocket)
(61,RET)
(62,sin_port)
(63,SetComputerNameA(data)
(64,data[recvResult])
(65,INVALID_SOCKET)
(66,bind(listenSocket, (struct sockaddr*)
(67,service)
(68,printLine("Failure setting computer name")
(69,acceptSocket)
(70,recvResult == 0)
(71,htons(LISTEN_PORT)
(72,recvResult)
(73,2)
(74,&wsaData)
(75,if (!SetComputerNameA(data)
(76,if (acceptSocket == INVALID_SOCKET)
(77,listenSocket)
(78,break;)
(79,break;)
(80,recvResult == SOCKET_ERROR || recvResult == 0)
(81,sin_family)
(82,accept(listenSocket, NULL, NULL)
(83,!SetComputerNameA(data)
(84,&service)
(85,break;)
(86,)
(87,service)
(88,memset(&service, 0, sizeof(service)
(89,wsaDataInit)
(90,if (acceptSocket != INVALID_SOCKET)
(91,acceptSocket = INVALID_SOCKET)
(92,AF_INET)
(93,data)
(94,data[recvResult] = \'\\0\')
(95,data = dataBuffer)
(96,wsaDataInit = FALSE)
(97,PF_INET)
(98,recvResult)
(99,acceptSocket == INVALID_SOCKET)
(100,\'\\0\')
(101,LISTEN_PORT)
(102,service.sin_family)
(103,"")
(104,service)
(105,acceptSocket)
(106,INVALID_SOCKET)
(107,MAKEWORD(2,2)
(108,service.sin_addr.s_addr)
(109,listenSocket)
(110,data)
(111,sin_addr)
(112,recvResult)
(113,service.sin_family = AF_INET)
(114,)
(115,service)
(116,recvResult)
(117,break;)
(118,if (wsaDataInit)
(119,)
(120,struct sockaddr*)
(121,listenSocket = INVALID_SOCKET)
(122,closesocket(listenSocket)
(123,data)
(124,acceptSocket)
(125,INVALID_SOCKET)
(126,s_addr)
(127,wsaDataInit = 1)
(128,exit(1)
(129,dataBuffer)
(130,listenSocket)
(131,acceptSocket = accept(listenSocket, NULL, NULL)
(132,STATIC_CONST_TRUE)
(133,WSAStartup(MAKEWORD(2,2)
(134,listenSocket)
(135,0)
(136,dataBuffer)
(137,INVALID_SOCKET)
(138,1)
(139,0)
(140,)
(141,service)
(142,)
(143,acceptSocket != INVALID_SOCKET)
(144,INADDR_ANY)
(145,if (listenSocket != INVALID_SOCKET)
(146,recv(acceptSocket, data, 100 - 1, 0)
(147,&service)
(148,listen(listenSocket, LISTEN_BACKLOG)
(149,)
(150,)
(151,data)
(152,service.sin_addr.s_addr = INADDR_ANY)
(153,NO_ERROR)
(154,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(155,SOCK_STREAM)
(156,recvResult == SOCKET_ERROR)
(157,service.sin_addr)
(158,0)
(159,listenSocket)
(160,0)
(161,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(162,if (listenSocket == INVALID_SOCKET)
(163,(struct sockaddr*)
(164,service)
(165,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
0