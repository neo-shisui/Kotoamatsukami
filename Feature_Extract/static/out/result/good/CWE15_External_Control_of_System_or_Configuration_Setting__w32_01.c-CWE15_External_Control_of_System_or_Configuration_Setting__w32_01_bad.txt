(14,52,0)
(84,52,0)
(32,35,0)
(155,52,0)
(52,29,0)
(159,36,0)
(89,13,0)
(157,147,0)
(122,147,0)
(7,147,0)
(19,147,0)
(133,34,0)
(2,105,0)
(66,147,0)
(87,58,0)
(47,13,0)
(118,13,0)
(4,49,0)
(34,66,0)
(26,24,0)
(36,159,0)
(8,66,0)
(154,140,0)
(86,82,0)
(53,13,0)
(119,142,0)
(126,72,0)
(67,39,0)
(143,28,0)
(12,147,0)
(82,157,0)
(129,13,0)
(22,124,0)
(128,38,0)
(36,162,0)
(23,36,0)
(45,120,0)
(60,6,0)
(158,84,0)
(13,90,0)
(55,15,0)
(10,69,0)
(91,83,0)
(72,32,0)
(95,140,0)
(152,160,0)
(18,120,0)
(112,140,0)
(83,91,0)
(24,11,0)
(38,58,0)
(10,147,0)
(34,130,0)
(31,52,0)
(161,29,0)
(21,8,0)
(58,66,0)
(120,22,0)
(100,35,0)
(3,13,0)
(110,13,0)
(11,114,0)
(144,1,0)
(138,13,0)
(20,39,0)
(70,79,0)
(41,139,0)
(69,52,0)
(76,64,0)
(108,69,0)
(32,72,0)
(117,132,0)
(95,83,0)
(75,47,0)
(101,61,0)
(43,116,0)
(136,155,0)
(120,66,0)
(91,66,0)
(93,147,0)
(7,113,0)
(77,147,0)
(131,149,0)
(44,155,0)
(15,83,0)
(70,66,0)
(153,24,0)
(146,47,0)
(135,157,0)
(69,83,0)
(98,15,0)
(69,39,0)
(97,28,0)
(155,150,0)
(120,18,0)
(63,90,0)
(64,66,0)
(155,10,0)
(52,90,0)
(148,95,0)
(150,147,0)
(162,36,0)
(106,147,0)
(48,143,0)
(125,91,0)
(9,64,0)
(59,13,0)
(79,13,0)
(134,113,0)
(54,13,0)
(25,8,0)
(81,119,0)
(65,147,0)
(121,79,0)
(103,106,0)
(33,65,0)
(56,91,0)
(16,35,0)
(84,62,0)
(28,143,0)
(66,8,0)
(35,10,0)
(37,79,0)
(102,72,0)
(99,85,0)
(88,18,0)
(120,105,0)
(80,70,0)
(114,11,0)
(35,32,0)
(72,10,0)
(94,13,0)
(62,84,0)
(85,83,0)
(85,140,0)
(115,162,0)
(145,28,0)
(29,90,0)
(36,147,0)
(30,150,0)
(50,69,0)
(73,124,0)
(74,61,0)
(123,10,0)
(22,78,0)
(111,69,0)
(0,114,0)
(127,159,0)
(139,11,0)
(96,29,0)
(42,85,0)
(124,22,0)
(40,83,0)
(95,156,0)
(78,22,0)
(11,24,0)
(105,120,0)
(27,142,0)
(137,27,0)
(113,7,0)
(109,70,0)
(107,147,0)
(141,90,0)
(71,82,0)
(11,139,0)
(69,10,0)
(46,65,0)
(104,90,0)
(5,58,0)
(17,91,0)
(83,147,0)
(140,13,0)
(22,120,0)
(39,69,0)
(61,7,0)
(34,79,0)
(143,106,0)
(58,38,0)
(57,66,0)
(92,8,0)
(68,62,1)
(113,134,1)
(70,80,1)
(98,83,1)
(144,105,1)
(85,83,1)
(128,105,1)
(71,86,1)
(29,96,1)
(34,133,1)
(82,71,1)
(2,7,1)
(121,47,1)
(127,64,1)
(9,66,1)
(36,162,1)
(151,70,1)
(38,58,1)
(150,30,1)
(83,91,1)
(0,24,1)
(7,113,1)
(126,10,1)
(81,62,1)
(42,43,1)
(26,140,1)
(95,148,1)
(88,22,1)
(21,25,1)
(42,117,1)
(117,139,1)
(120,22,1)
(139,41,1)
(69,39,1)
(55,98,1)
(52,14,1)
(158,151,1)
(120,18,1)
(56,17,1)
(5,128,1)
(14,31,1)
(96,161,1)
(124,73,1)
(16,100,1)
(109,85,1)
(41,11,1)
(10,69,1)
(40,38,1)
(45,2,1)
(17,125,1)
(69,111,1)
(47,146,1)
(18,88,1)
(135,82,1)
(70,66,1)
(131,15,1)
(139,11,1)
(31,29,1)
(84,52,1)
(155,10,1)
(70,79,1)
(159,127,1)
(72,102,1)
(100,72,1)
(42,131,1)
(137,119,1)
(46,33,1)
(52,29,1)
(44,136,1)
(32,35,1)
(105,120,1)
(133,70,1)
(84,158,1)
(64,66,1)
(108,123,1)
(15,83,1)
(58,66,1)
(86,36,1)
(91,56,1)
(153,26,1)
(80,109,1)
(62,84,1)
(34,66,1)
(151,34,1)
(140,154,1)
(50,108,1)
(72,10,1)
(119,81,1)
(4,151,1)
(11,24,1)
(97,157,1)
(39,20,1)
(61,101,1)
(42,144,1)
(35,10,1)
(134,61,1)
(158,4,1)
(74,106,1)
(15,55,1)
(154,112,1)
(22,78,1)
(34,79,1)
(91,66,1)
(143,48,1)
(57,65,1)
(23,159,1)
(157,135,1)
(73,45,1)
(65,46,1)
(99,42,1)
(92,21,1)
(67,50,1)
(114,0,1)
(66,8,1)
(155,52,1)
(68,27,1)
(35,16,1)
(115,23,1)
(26,51,1)
(24,153,1)
(112,79,1)
(42,51,1)
(28,145,1)
(101,74,1)
(111,39,1)
(136,32,1)
(64,76,1)
(33,139,1)
(102,126,1)
(30,155,1)
(60,64,1)
(42,60,1)
(95,83,1)
(103,143,1)
(43,32,1)
(32,72,1)
(11,114,1)
(20,67,1)
(58,87,1)
(37,121,1)
(75,52,1)
(95,140,1)
(42,152,1)
(145,97,1)
(27,137,1)
(48,28,1)
(69,83,1)
(25,57,1)
(143,28,1)
(69,52,1)
(123,15,1)
(109,95,1)
(155,44,1)
(146,75,1)
(148,85,1)
(85,140,1)
(162,115,1)
(76,9,1)
(106,103,1)
(87,5,1)
(8,92,1)
(152,38,1)
(85,99,1)
(120,66,1)
(22,124,1)
(79,37,1)
(125,40,1)
(36,159,1)
(51,150,1)
(83,38,2)
(106,64,2)
(66,139,2)
(64,139,2)
(102,15,2)
(84,52,2)
(97,64,2)
(46,139,2)
(4,151,2)
(25,139,2)
(38,105,2)
(16,72,2)
(145,64,2)
(85,83,2)
(69,15,2)
(52,29,2)
(71,64,2)
(27,62,2)
(143,28,2)
(143,64,2)
(88,64,2)
(18,64,2)
(131,15,2)
(144,105,2)
(125,38,2)
(105,120,2)
(69,52,2)
(124,64,2)
(111,15,2)
(2,64,2)
(162,64,2)
(127,64,2)
(117,139,2)
(32,15,2)
(108,15,2)
(103,64,2)
(139,51,2)
(153,51,2)
(55,38,2)
(120,64,2)
(28,64,2)
(152,38,2)
(92,139,2)
(35,10,2)
(11,24,2)
(126,15,2)
(85,140,2)
(32,35,2)
(43,32,2)
(157,64,2)
(45,64,2)
(22,64,2)
(82,64,2)
(64,66,2)
(32,72,2)
(33,139,2)
(38,58,2)
(30,32,2)
(137,62,2)
(95,85,2)
(44,32,2)
(56,38,2)
(114,51,2)
(91,66,2)
(17,38,2)
(95,140,2)
(148,85,2)
(69,83,2)
(159,64,2)
(70,79,2)
(135,64,2)
(57,139,2)
(20,15,2)
(21,139,2)
(76,139,2)
(10,69,2)
(11,114,2)
(51,32,2)
(58,105,2)
(36,64,2)
(50,15,2)
(120,66,2)
(86,64,2)
(72,10,2)
(48,64,2)
(62,84,2)
(100,72,2)
(155,32,2)
(150,32,2)
(5,105,2)
(81,62,2)
(119,62,2)
(136,32,2)
(115,64,2)
(120,22,2)
(8,139,2)
(69,39,2)
(0,51,2)
(34,66,2)
(87,105,2)
(23,64,2)
(155,52,2)
(123,15,2)
(9,139,2)
(74,64,2)
(7,113,2)
(34,70,2)
(40,38,2)
(105,64,2)
(58,66,2)
(70,66,2)
(128,105,2)
(34,79,2)
(36,162,2)
(83,91,2)
(15,38,2)
(11,51,2)
(72,15,2)
(91,38,2)
(65,139,2)
(22,78,2)
(134,64,2)
(155,10,2)
(39,15,2)
(133,70,2)
(36,159,2)
(101,64,2)
(67,15,2)
(98,38,2)
(35,72,2)
(113,64,2)
(60,64,2)
(73,64,2)
(95,83,2)
(66,8,2)
(7,64,2)
(15,83,2)
(26,51,2)
(61,64,2)
(139,11,2)
(22,124,2)
(120,18,2)
(10,15,2)
(41,51,2)
(24,51,2)
-----------------------------------
(0,wsaData)
(1,)
(2,SOCKET_ERROR)
(3,do)
(4,WSACleanup()
(5,listenSocket)
(6,)
(7,service.sin_port = htons(LISTEN_PORT)
(8,socket(PF_INET, SOCK_STREAM, 0)
(9,listenSocket)
(10,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(11,WSAStartup(MAKEWORD(2,2)
(12,if (recvResult == SOCKET_ERROR || recvResult == 0)
(13,)
(14,dataBuffer)
(15,acceptSocket == INVALID_SOCKET)
(16,0)
(17,NULL)
(18,sizeof(service)
(19,if (WSAStartup(MAKEWORD(2,2)
(20,1)
(21,SOCK_STREAM)
(22,(struct sockaddr*)
(23,0)
(24,MAKEWORD(2,2)
(25,PF_INET)
(26,2)
(27,exit(1)
(28,service.sin_addr)
(29,dataBuffer[100] = "")
(30,\'\\0\')
(31,data)
(32,recvResult == SOCKET_ERROR || recvResult == 0)
(33,wsaDataInit)
(34,closesocket(listenSocket)
(35,recvResult == 0)
(36,memset(&service, 0, sizeof(service)
(37,INVALID_SOCKET)
(38,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(39,100 - 1)
(40,acceptSocket)
(41,NO_ERROR)
(42,acceptSocket)
(43,break;)
(44,recvResult)
(45,listenSocket)
(46,1)
(47,wsaDataInit = FALSE)
(48,s_addr)
(49,)
(50,data)
(51,0)
(52,data = dataBuffer)
(53,if (listenSocket != INVALID_SOCKET)
(54,acceptSocket)
(55,INVALID_SOCKET)
(56,NULL)
(57,listenSocket)
(58,listen(listenSocket, LISTEN_BACKLOG)
(59,wsaDataInit)
(60,break;)
(61,service.sin_port)
(62,!SetComputerNameA(data)
(63,if (!SetComputerNameA(data)
(64,listenSocket == INVALID_SOCKET)
(65,wsaDataInit = 1)
(66,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(67,100)
(68,RET)
(69,recv(acceptSocket, data, 100 - 1, 0)
(70,listenSocket != INVALID_SOCKET)
(71,sin_family)
(72,recvResult == SOCKET_ERROR)
(73,service)
(74,service)
(75,wsaDataInit)
(76,INVALID_SOCKET)
(77,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(78,struct sockaddr*)
(79,listenSocket = INVALID_SOCKET)
(80,INVALID_SOCKET)
(81,"Failure setting computer name")
(82,service.sin_family)
(83,acceptSocket = accept(listenSocket, NULL, NULL)
(84,SetComputerNameA(data)
(85,acceptSocket != INVALID_SOCKET)
(86,service)
(87,LISTEN_BACKLOG)
(88,service)
(89,if (acceptSocket != INVALID_SOCKET)
(90,)
(91,accept(listenSocket, NULL, NULL)
(92,0)
(93,if (listenSocket == INVALID_SOCKET)
(94,recvResult)
(95,closesocket(acceptSocket)
(96,"")
(97,service)
(98,acceptSocket)
(99,INVALID_SOCKET)
(100,recvResult)
(101,sin_port)
(102,SOCKET_ERROR)
(103,INADDR_ANY)
(104,data)
(105,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(106,service.sin_addr.s_addr = INADDR_ANY)
(107,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(108,acceptSocket)
(109,listenSocket)
(110,if (wsaDataInit)
(111,0)
(112,acceptSocket)
(113,htons(LISTEN_PORT)
(114,&wsaData)
(115,service)
(116,)
(117,break;)
(118,service)
(119,printLine("Failure setting computer name")
(120,bind(listenSocket, (struct sockaddr*)
(121,listenSocket)
(122,if (acceptSocket == INVALID_SOCKET)
(123,recvResult)
(124,&service)
(125,listenSocket)
(126,recvResult)
(127,service)
(128,SOCKET_ERROR)
(129,listenSocket)
(130,)
(131,break;)
(132,)
(133,listenSocket)
(134,LISTEN_PORT)
(135,AF_INET)
(136,data)
(137,1)
(138,wsaData)
(139,WSAStartup(MAKEWORD(2,2)
(140,acceptSocket = INVALID_SOCKET)
(141,dataBuffer)
(142,)
(143,service.sin_addr.s_addr)
(144,break;)
(145,sin_addr)
(146,FALSE)
(147,)
(148,acceptSocket)
(149,)
(150,data[recvResult] = \'\\0\')
(151,wsaDataInit)
(152,break;)
(153,2)
(154,INVALID_SOCKET)
(155,data[recvResult])
(156,)
(157,service.sin_family = AF_INET)
(158,data)
(159,&service)
(160,)
(161,dataBuffer)
(162,sizeof(service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
0