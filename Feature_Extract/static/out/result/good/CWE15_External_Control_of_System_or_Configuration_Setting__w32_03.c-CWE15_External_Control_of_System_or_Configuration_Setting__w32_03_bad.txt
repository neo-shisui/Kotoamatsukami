(116,103,0)
(47,127,0)
(32,21,0)
(53,152,0)
(88,163,0)
(66,103,0)
(143,146,0)
(148,82,0)
(107,160,0)
(96,126,0)
(142,24,0)
(82,68,0)
(31,137,0)
(98,83,0)
(21,129,0)
(99,21,0)
(50,110,0)
(90,124,0)
(24,101,0)
(9,67,0)
(161,39,0)
(92,97,0)
(42,21,0)
(28,0,0)
(13,111,0)
(117,96,0)
(132,68,0)
(47,24,0)
(24,47,0)
(162,73,0)
(7,93,0)
(127,47,0)
(140,128,0)
(111,161,0)
(167,80,0)
(41,111,0)
(52,161,0)
(82,103,0)
(146,68,0)
(45,161,0)
(64,152,0)
(103,82,0)
(96,154,0)
(102,49,0)
(134,3,0)
(81,137,0)
(4,20,0)
(138,83,0)
(61,152,0)
(0,152,0)
(162,152,0)
(1,101,0)
(151,89,0)
(165,65,0)
(109,84,0)
(75,49,0)
(6,29,0)
(90,8,0)
(166,14,0)
(115,21,0)
(145,21,0)
(68,152,0)
(44,29,0)
(108,33,0)
(113,10,0)
(67,164,0)
(49,83,0)
(20,3,0)
(2,159,0)
(149,25,0)
(5,164,0)
(29,82,0)
(119,39,0)
(124,21,0)
(16,120,0)
(136,161,0)
(22,90,0)
(101,24,0)
(128,68,0)
(58,56,0)
(106,154,0)
(91,6,0)
(139,45,0)
(48,83,0)
(89,162,0)
(97,21,0)
(39,161,0)
(121,82,0)
(40,15,0)
(122,128,0)
(87,20,0)
(69,89,0)
(54,159,0)
(68,128,0)
(159,54,0)
(144,124,0)
(153,43,0)
(120,152,0)
(141,39,0)
(70,71,0)
(29,152,0)
(0,25,0)
(111,97,0)
(155,21,0)
(24,95,0)
(77,152,0)
(157,128,0)
(161,152,0)
(79,126,0)
(25,0,0)
(49,138,0)
(59,21,0)
(95,24,0)
(82,29,0)
(65,68,0)
(3,20,0)
(46,76,0)
(37,56,0)
(114,54,0)
(15,40,0)
(65,124,0)
(131,146,0)
(19,40,0)
(125,124,0)
(33,47,0)
(0,160,0)
(63,56,0)
(154,96,0)
(72,5,0)
(82,49,0)
(110,54,0)
(100,76,0)
(112,95,0)
(123,17,0)
(105,152,0)
(51,10,0)
(130,83,0)
(47,33,0)
(34,114,0)
(85,82,0)
(20,161,0)
(118,83,0)
(136,156,0)
(35,138,0)
(104,152,0)
(56,29,0)
(86,110,0)
(56,37,0)
(128,161,0)
(135,73,0)
(74,154,0)
(26,133,0)
(76,21,0)
(6,49,0)
(24,161,0)
(57,21,0)
(73,162,0)
(137,163,0)
(54,114,0)
(62,120,0)
(23,138,0)
(60,97,0)
(37,10,0)
(18,38,0)
(78,6,0)
(160,0,0)
(10,29,0)
(126,152,0)
(163,152,0)
(94,21,0)
(147,71,0)
(40,49,0)
(90,68,0)
(55,39,0)
(54,110,0)
(158,65,0)
(150,136,0)
(27,21,0)
(6,80,0)
(80,152,0)
(10,37,0)
(30,45,0)
(136,97,0)
(24,47,1)
(37,56,1)
(58,63,1)
(19,71,1)
(56,29,1)
(22,65,1)
(121,103,1)
(2,110,1)
(46,100,1)
(0,25,1)
(166,37,1)
(135,89,1)
(71,70,1)
(19,7,1)
(106,163,1)
(165,36,1)
(153,45,1)
(165,26,1)
(54,110,1)
(165,109,1)
(88,137,1)
(96,117,1)
(154,74,1)
(142,112,1)
(158,165,1)
(120,16,1)
(28,25,1)
(82,49,1)
(107,28,1)
(50,124,1)
(65,158,1)
(54,159,1)
(49,138,1)
(114,34,1)
(80,167,1)
(65,68,1)
(108,142,1)
(161,39,1)
(136,150,1)
(82,121,1)
(165,123,1)
(47,127,1)
(35,23,1)
(26,95,1)
(149,45,1)
(50,36,1)
(31,81,1)
(87,4,1)
(19,11,1)
(92,76,1)
(49,102,1)
(165,153,1)
(151,126,1)
(10,113,1)
(51,29,1)
(74,106,1)
(45,30,1)
(103,116,1)
(3,20,1)
(128,161,1)
(117,154,1)
(20,161,1)
(62,114,1)
(69,151,1)
(11,136,1)
(102,75,1)
(6,49,1)
(12,67,1)
(114,54,1)
(113,51,1)
(33,108,1)
(73,135,1)
(55,52,1)
(60,92,1)
(20,87,1)
(141,119,1)
(95,24,1)
(34,54,1)
(119,55,1)
(131,68,1)
(68,128,1)
(139,161,1)
(63,10,1)
(1,47,1)
(6,91,1)
(109,3,1)
(144,97,1)
(112,162,1)
(147,49,1)
(79,96,1)
(128,122,1)
(82,103,1)
(40,19,1)
(157,140,1)
(45,161,1)
(86,50,1)
(165,18,1)
(134,95,1)
(18,114,1)
(29,82,1)
(7,11,1)
(12,15,1)
(5,72,1)
(85,44,1)
(110,86,1)
(111,97,1)
(37,10,1)
(78,37,1)
(140,132,1)
(146,68,1)
(132,3,1)
(75,138,1)
(100,71,1)
(162,73,1)
(124,125,1)
(136,97,1)
(65,124,1)
(82,68,1)
(123,146,1)
(10,29,1)
(96,154,1)
(44,146,1)
(122,157,1)
(137,31,1)
(143,131,1)
(126,79,1)
(111,161,1)
(4,134,1)
(30,139,1)
(138,35,1)
(11,111,1)
(165,166,1)
(39,141,1)
(56,58,1)
(111,41,1)
(97,60,1)
(52,120,1)
(76,46,1)
(90,22,1)
(41,13,1)
(15,40,1)
(163,88,1)
(148,85,1)
(125,144,1)
(6,29,1)
(40,49,1)
(146,143,1)
(90,124,1)
(81,0,1)
(116,66,1)
(90,68,1)
(13,90,1)
(16,62,1)
(167,6,1)
(25,149,1)
(91,78,1)
(101,1,1)
(136,161,1)
(66,148,1)
(70,147,1)
(159,2,1)
(9,5,1)
(47,33,1)
(89,69,1)
(67,9,1)
(36,80,1)
(24,161,1)
(72,15,1)
(160,107,1)
(0,160,1)
(13,65,1)
(24,101,1)
(150,111,1)
(65,71,2)
(3,20,2)
(62,114,2)
(20,95,2)
(31,45,2)
(80,37,2)
(162,45,2)
(11,71,2)
(13,71,2)
(90,68,2)
(10,146,2)
(54,36,2)
(24,47,2)
(114,36,2)
(114,54,2)
(68,3,2)
(73,45,2)
(4,95,2)
(106,45,2)
(56,29,2)
(89,45,2)
(18,114,2)
(24,101,2)
(65,124,2)
(120,114,2)
(34,71,2)
(0,25,2)
(10,29,2)
(6,49,2)
(37,10,2)
(82,103,2)
(154,45,2)
(9,15,2)
(7,11,2)
(116,146,2)
(125,71,2)
(160,45,2)
(96,45,2)
(85,146,2)
(1,45,2)
(29,82,2)
(76,71,2)
(51,146,2)
(143,3,2)
(90,124,2)
(101,45,2)
(6,29,2)
(114,71,2)
(26,95,2)
(49,138,2)
(3,95,2)
(6,37,2)
(67,15,2)
(60,71,2)
(132,3,2)
(47,127,2)
(92,71,2)
(122,3,2)
(37,56,2)
(119,114,2)
(140,3,2)
(82,49,2)
(142,45,2)
(54,159,2)
(34,36,2)
(111,161,2)
(46,71,2)
(162,73,2)
(153,45,2)
(86,71,2)
(68,128,2)
(87,95,2)
(165,71,2)
(65,68,2)
(131,3,2)
(136,161,2)
(5,15,2)
(157,3,2)
(146,3,2)
(103,146,2)
(15,40,2)
(50,71,2)
(139,114,2)
(86,36,2)
(110,36,2)
(82,68,2)
(161,39,2)
(39,114,2)
(25,45,2)
(141,114,2)
(146,68,2)
(24,45,2)
(16,114,2)
(33,45,2)
(163,45,2)
(110,71,2)
(54,110,2)
(124,71,2)
(22,65,2)
(28,45,2)
(72,15,2)
(0,45,2)
(45,161,2)
(136,97,2)
(111,97,2)
(41,71,2)
(112,45,2)
(123,146,2)
(149,45,2)
(69,45,2)
(36,37,2)
(20,161,2)
(128,3,2)
(2,36,2)
(150,111,2)
(79,45,2)
(37,146,2)
(47,45,2)
(158,71,2)
(91,37,2)
(88,45,2)
(56,10,2)
(134,95,2)
(136,111,2)
(24,161,2)
(159,71,2)
(74,45,2)
(90,65,2)
(58,10,2)
(52,114,2)
(111,71,2)
(0,160,2)
(117,45,2)
(2,71,2)
(126,45,2)
(81,45,2)
(54,71,2)
(97,71,2)
(66,146,2)
(135,45,2)
(151,45,2)
(95,45,2)
(47,33,2)
(50,36,2)
(107,45,2)
(144,71,2)
(108,45,2)
(78,37,2)
(113,146,2)
(121,146,2)
(128,161,2)
(137,45,2)
(45,114,2)
(63,10,2)
(44,146,2)
(30,114,2)
(100,71,2)
(148,146,2)
(159,36,2)
(109,3,2)
(40,49,2)
(96,154,2)
(95,24,2)
(82,146,2)
(166,37,2)
(55,114,2)
(161,114,2)
(167,37,2)
(29,146,2)
-----------------------------------
(0,memset(&service, 0, sizeof(service)
(1,service)
(2,wsaData)
(3,SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(4,listenSocket)
(5,printLine("Failure setting computer name")
(6,data[recvResult])
(7,WSACleanup()
(8,)
(9,1)
(10,recvResult == SOCKET_ERROR)
(11,wsaDataInit)
(12,RET)
(13,listenSocket)
(14,)
(15,!SetComputerNameA(data)
(16,1)
(17,)
(18,break;)
(19,data)
(20,listen(listenSocket, LISTEN_BACKLOG)
(21,)
(22,acceptSocket)
(23,dataBuffer)
(24,bind(listenSocket, (struct sockaddr*)
(25,&service)
(26,break;)
(27,if (wsaDataInit)
(28,0)
(29,recvResult = recv(acceptSocket, data, 100 - 1, 0)
(30,INVALID_SOCKET)
(31,sin_family)
(32,acceptSocket)
(33,&service)
(34,NO_ERROR)
(35,"")
(36,0)
(37,recvResult == SOCKET_ERROR || recvResult == 0)
(38,)
(39,socket(PF_INET, SOCK_STREAM, 0)
(40,SetComputerNameA(data)
(41,INVALID_SOCKET)
(42,recvResult)
(43,)
(44,recvResult)
(45,listenSocket == INVALID_SOCKET)
(46,FALSE)
(47,(struct sockaddr*)
(48,if(5==5)
(49,data = dataBuffer)
(50,2)
(51,recvResult)
(52,listenSocket)
(53,if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG)
(54,WSAStartup(MAKEWORD(2,2)
(55,PF_INET)
(56,recvResult == 0)
(57,listenSocket)
(58,0)
(59,if (acceptSocket != INVALID_SOCKET)
(60,INVALID_SOCKET)
(61,if (WSAStartup(MAKEWORD(2,2)
(62,wsaDataInit)
(63,recvResult)
(64,if (listenSocket == INVALID_SOCKET)
(65,acceptSocket != INVALID_SOCKET)
(66,100)
(67,exit(1)
(68,acceptSocket = accept(listenSocket, NULL, NULL)
(69,sin_port)
(70,5)
(71,5==5)
(72,"Failure setting computer name")
(73,htons(LISTEN_PORT)
(74,sin_addr)
(75,data)
(76,wsaDataInit = FALSE)
(77,if (acceptSocket == INVALID_SOCKET)
(78,data)
(79,INADDR_ANY)
(80,data[recvResult] = \'\\0\')
(81,service)
(82,recv(acceptSocket, data, 100 - 1, 0)
(83,)
(84,)
(85,acceptSocket)
(86,2)
(87,LISTEN_BACKLOG)
(88,AF_INET)
(89,service.sin_port)
(90,closesocket(acceptSocket)
(91,recvResult)
(92,listenSocket)
(93,)
(94,wsaDataInit)
(95,SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(96,service.sin_addr.s_addr)
(97,listenSocket = INVALID_SOCKET)
(98,data)
(99,service)
(100,wsaDataInit)
(101,sizeof(service)
(102,dataBuffer)
(103,100 - 1)
(104,if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)
(105,if (recvResult == SOCKET_ERROR || recvResult == 0)
(106,service)
(107,service)
(108,service)
(109,break;)
(110,MAKEWORD(2,2)
(111,listenSocket != INVALID_SOCKET)
(112,SOCKET_ERROR)
(113,SOCKET_ERROR)
(114,WSAStartup(MAKEWORD(2,2)
(115,wsaData)
(116,1)
(117,s_addr)
(118,dataBuffer)
(119,SOCK_STREAM)
(120,wsaDataInit = 1)
(121,0)
(122,NULL)
(123,break;)
(124,acceptSocket = INVALID_SOCKET)
(125,INVALID_SOCKET)
(126,service.sin_addr.s_addr = INADDR_ANY)
(127,struct sockaddr*)
(128,accept(listenSocket, NULL, NULL)
(129,)
(130,if (!SetComputerNameA(data)
(131,acceptSocket)
(132,acceptSocket)
(133,)
(134,SOCKET_ERROR)
(135,LISTEN_PORT)
(136,closesocket(listenSocket)
(137,service.sin_family)
(138,dataBuffer[100] = "")
(139,listenSocket)
(140,listenSocket)
(141,0)
(142,listenSocket)
(143,INVALID_SOCKET)
(144,acceptSocket)
(145,do)
(146,acceptSocket == INVALID_SOCKET)
(147,5)
(148,data)
(149,service)
(150,listenSocket)
(151,service)
(152,)
(153,break;)
(154,service.sin_addr)
(155,if (listenSocket != INVALID_SOCKET)
(156,)
(157,NULL)
(158,INVALID_SOCKET)
(159,&wsaData)
(160,sizeof(service)
(161,listenSocket = socket(PF_INET, SOCK_STREAM, 0)
(162,service.sin_port = htons(LISTEN_PORT)
(163,service.sin_family = AF_INET)
(164,)
(165,acceptSocket)
(166,break;)
(167,\'\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
0